#!/Users/evangoulden/.local/share/virtualenvs/encrypt_file-5-W2I_RU/bin/python3
import os
import base64
import argparse
import getpass
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

# Function to derive key from password
def derive_key_from_password(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

# Function to encrypt a file in-place
def encrypt_file(file_path: str, password: str):
    salt = os.urandom(16)  # Generate a random salt
    key = derive_key_from_password(password, salt)
    cipher = Fernet(key)

    # Read file data
    with open(file_path, "rb") as file:
        original_data = file.read()

    encrypted_data = cipher.encrypt(original_data)

    # Overwrite file with salt + encrypted data
    with open(file_path, "wb") as file:
        file.write(salt + encrypted_data)

    print(f"üîê File '{file_path}' has been encrypted.")

# Function to decrypt a file in-place
def decrypt_file(file_path: str, password: str):
    # Read the file
    with open(file_path, "rb") as file:
        salt = file.read(16)  # First 16 bytes are the salt
        encrypted_data = file.read()

    key = derive_key_from_password(password, salt)
    cipher = Fernet(key)

    try:
        decrypted_data = cipher.decrypt(encrypted_data)

        # Overwrite file with decrypted content
        with open(file_path, "wb") as file:
            file.write(decrypted_data)

        print(f"üîì File '{file_path}' has been decrypted.")
    except Exception as e:
        print("‚ùå Error: Incorrect password or corrupted file.")

# Main function for command-line interface
def main():
    parser = argparse.ArgumentParser(description="Encrypt or decrypt a file in-place.")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Choose whether to encrypt or decrypt the file.")
    parser.add_argument("file", help="Path to the file to process.")
    args = parser.parse_args()

    # Securely get the password from the user
    password = getpass.getpass("Enter password: ")

    if args.mode == "encrypt":
        encrypt_file(args.file, password)
    elif args.mode == "decrypt":
        decrypt_file(args.file, password)

if __name__ == "__main__":
    main()
